<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Mon, 21 Nov 2022 11:14:10 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: mastoServer</title>
		<dateCreated>Sat, 19 Nov 2022 13:58:16 GMT</dateCreated>
		<dateModified>Mon, 21 Nov 2022 11:14:09 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 3, 11, 40, 45, 46, 47, 49, 52, 63, 64, 65, 70, 84, 85, 88, 94, 95, 98, 106, 114, 117, 120, 124, 127, 129, 137, 141, 145, 149, 160, 161, 163</expansionState>
		<vertScrollState>104</vertScrollState>
		<windowTop>60</windowTop>
		<windowLeft>495</windowLeft>
		<windowBottom>946</windowBottom>
		<windowRight>1602</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/mastoserver/">
			<outline text="package.json" created="Wed, 16 Nov 2022 14:25:59 GMT">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;mastoserver&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A server app that connects to Mastodon via OAuth.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;main&quot;: &quot;mastoserver.js&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="mastoserver.js" created="Wed, 16 Nov 2022 14:27:21 GMT">
				<outline text="const myVersion = &quot;0.4.0&quot;, myProductName = &quot;mastoserver&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="" created="Wed, 16 Nov 2022 14:30:23 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="" created="Wed, 16 Nov 2022 14:31:49 GMT"/>
				<outline text="var config = {">
					<outline text="clientKey: undefined, //11/16/22 by DW"/>
					<outline text="clientSecret: undefined,"/>
					<outline text="myAccessToken: undefined,"/>
					<outline text="urlMastodonServer: undefined," created="Tue, 15 Nov 2022 14:33:51 GMT"/>
					<outline text="urlRedirect: undefined," created="Wed, 16 Nov 2022 17:28:12 GMT"/>
					<outline text="urlRedirectForUser: &quot;http://localhost:1401/blagooey&quot;, //the page we send the user back to once they're logged in" isComment="true" created="Fri, 18 Nov 2022 14:41:56 GMT"/>
					<outline text="" created="Wed, 16 Nov 2022 17:19:11 GMT"/>
					<outline text="httpPort: process.env.PORT || 1401,"/>
					<outline text="myDomain: &quot;localhost&quot;,"/>
					<outline text="twitterConsumerKey: undefined," isComment="true"/>
					<outline text="twitterConsumerSecret: undefined," isComment="true"/>
					<outline text="flForceTwitterLogin: false," isComment="true"/>
					<outline text="flLogToConsole: true,"/>
					<outline text="flAllowAccessFromAnywhere: true, //1/2/18 by DW"/>
					<outline text="flPostEnabled: false, //1/3/18 by DW"/>
					<outline text="" created="Wed, 16 Nov 2022 17:19:10 GMT"/>
					<outline text="httpRequestCallback: function (theRequest) {" isComment="true">
						<outline text="return (false); //not consumed"/>
						<outline text="},"/>
						</outline>
					<outline text="http404Callback: function (theRequest) { //1/24/21 by DW" isComment="true">
						<outline text="return (false); //not consumed"/>
						<outline text="},"/>
						</outline>
					<outline text="blockedAddresses: new Array (), //4/17/18 by DW" isComment="true"/>
					<outline text="cacheFolder: &quot;data/cache/&quot;, //3/11/21 by DW" isComment="true" created="Mon, 08 Mar 2021 21:11:49 GMT"/>
					<outline text="flUseCache: true, //3/11/21 by DW" isComment="true" created="Thu, 11 Mar 2021 17:44:13 GMT"/>
					<outline text="flServerEnabled: true,//5/2/21 by DW" isComment="true" created="Sun, 02 May 2021 13:43:47 GMT"/>
					<outline text="flRemoveLineBreaksInOPML: true, //7/24/21 by DW" isComment="true" created="Sat, 24 Jul 2021 13:31:14 GMT"/>
					<outline text="dataFolder: &quot;data/&quot;, //7/24/21 by DW" isComment="true" created="Mon, 08 Mar 2021 21:11:49 GMT"/>
					<outline text="userLogonCallback: function (options) { //8/14/22 by DW" isComment="true" created="Sun, 14 Aug 2022 21:58:58 GMT">
						<outline text="}" created="Sun, 14 Aug 2022 21:59:09 GMT"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text="" created="Wed, 16 Nov 2022 17:18:15 GMT"/>
				<outline text="function readConfig (callback) {" created="Wed, 16 Nov 2022 15:42:09 GMT">
					<outline text="fs.readFile (&quot;config.json&quot;, function (err, jsontext) {" created="Wed, 16 Nov 2022 15:42:34 GMT">
						<outline text="if (!err) {" created="Wed, 16 Nov 2022 15:42:51 GMT">
							<outline text="var jstruct;" created="Wed, 16 Nov 2022 15:42:50 GMT"/>
							<outline text="try {" created="Wed, 16 Nov 2022 15:43:21 GMT">
								<outline text="jstruct = JSON.parse (jsontext);" created="Wed, 16 Nov 2022 15:43:57 GMT"/>
								<outline text="for (var x in jstruct) {" created="Wed, 16 Nov 2022 15:44:48 GMT">
									<outline text="config [x] = jstruct [x];" created="Wed, 16 Nov 2022 15:44:54 GMT"/>
									<outline text="}" created="Wed, 16 Nov 2022 15:45:01 GMT"/>
									</outline>
								<outline text="}" created="Wed, 16 Nov 2022 15:43:26 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Wed, 16 Nov 2022 15:43:26 GMT">
								<outline text="console.log (&quot;readConfig: err.message == &quot; + utils.jsonStringify (err.message));" created="Wed, 16 Nov 2022 15:43:30 GMT"/>
								<outline text="}" created="Wed, 16 Nov 2022 15:43:43 GMT"/>
								</outline>
							<outline text="}" created="Wed, 16 Nov 2022 15:42:55 GMT"/>
							</outline>
						<outline text="callback ();" created="Wed, 16 Nov 2022 15:49:59 GMT"/>
						<outline text="});" created="Wed, 16 Nov 2022 15:42:44 GMT"/>
						</outline>
					<outline text="}" created="Wed, 16 Nov 2022 15:42:33 GMT"/>
					</outline>
				<outline text="function httpRequest (url, method=&quot;GET&quot;, callback) {">
					<outline text="var theRequest = {">
						<outline text="method,"/>
						<outline text="url"/>
						<outline text="};"/>
						</outline>
					<outline text="request (theRequest, function (err, response, data) {">
						<outline text="if (err) {" created="Sun, 08 Aug 2021 15:33:13 GMT">
							<outline text="callback (err);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:20 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 08 Aug 2021 15:33:21 GMT">
							<outline text="var code = response.statusCode;" created="Tue, 04 Jan 2022 22:39:15 GMT"/>
							<outline text="if ((code &lt; 200) || (code &gt; 299)) {" created="Sun, 08 Aug 2021 15:33:23 GMT">
								<outline text="const message = &quot;The request returned a status code of &quot; + response.statusCode + &quot;.&quot;;" created="Sun, 08 Aug 2021 15:34:06 GMT"/>
								<outline text="callback ({message});" created="Sun, 08 Aug 2021 15:34:43 GMT"/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:28 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 08 Aug 2021 15:33:29 GMT">
								<outline text="callback (undefined, data) "/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:31 GMT"/>
								</outline>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:33 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function buildParamList (paramtable, flPrivate) { //8/4/21 by DW" created="Sat, 09 Aug 2014 15:39:08 GMT" pgfnum="43181">
					<outline text="Changes" isComment="true" created="Wed, 04 Aug 2021 14:47:01 GMT">
						<outline text="8/4/21; 10:47:04 AM by DW" created="Wed, 04 Aug 2021 14:47:03 GMT">
							<outline text="Copied twBuildParamList. If an element of params is undefined, don't include it. We were encoding it as a string, &quot;undefined&quot; and all of a sudden on the other side, in davetwitter, it was calling it an error. It is pretty errorish, but why it started now, that's a mystery." created="Wed, 04 Aug 2021 14:47:04 GMT"/>
							</outline>
						</outline>
					<outline text="var s = &quot;&quot;;" created="Sat, 09 Aug 2014 15:39:47 GMT" pgfnum="43188"/>
					<outline text="if (flPrivate) {" created="Sat, 09 Aug 2014 20:17:16 GMT" pgfnum="43185">
						<outline text="paramtable.flprivate = &quot;true&quot;;" created="Sat, 09 Aug 2014 15:43:48 GMT" pgfnum="43208"/>
						<outline text="}" created="Sat, 09 Aug 2014 20:17:19 GMT" pgfnum="43186"/>
						</outline>
					<outline text="for (var x in paramtable) {" created="Sat, 09 Aug 2014 15:39:38 GMT" pgfnum="43186">
						<outline text="if (paramtable [x] !== undefined) { //8/4/21 by DW" created="Wed, 04 Aug 2021 14:48:52 GMT">
							<outline text="if (s.length &gt; 0) {" created="Sat, 09 Aug 2014 15:40:02 GMT" pgfnum="43189">
								<outline text="s += &quot;&amp;&quot;;" created="Sat, 09 Aug 2014 15:40:08 GMT" pgfnum="43190"/>
								<outline text="}" created="Sat, 09 Aug 2014 15:40:14 GMT" pgfnum="43191"/>
								</outline>
							<outline text="s += x + &quot;=&quot; + paramtable [x];" created="Sat, 09 Aug 2014 15:40:19 GMT" pgfnum="43192"/>
							<outline text="s += x + &quot;=&quot; + encodeURIComponent (paramtable [x]);" isComment="true" created="Sat, 09 Aug 2014 15:40:19 GMT" pgfnum="43192"/>
							<outline text="}" created="Wed, 04 Aug 2021 14:49:01 GMT"/>
							</outline>
						<outline text="}" created="Sat, 09 Aug 2014 15:39:43 GMT" pgfnum="43187"/>
						</outline>
					<outline text="return (s);" created="Sat, 09 Aug 2014 15:40:54 GMT" pgfnum="43193"/>
					<outline text="}" created="Sat, 09 Aug 2014 15:39:35 GMT" pgfnum="43185"/>
					</outline>
				<outline text="function getUrlForAuthorize (urlRedirect) {" created="Thu, 17 Nov 2022 13:10:05 GMT">
					<outline text="Changes" isComment="true" created="Fri, 18 Nov 2022 14:33:59 GMT">
						<outline text="11/18/22; 9:34:03 AM by DW" created="Fri, 18 Nov 2022 14:34:02 GMT">
							<outline text="Construct a URL to redirect to, to get the authorization token for the user. " created="Fri, 18 Nov 2022 14:34:04 GMT"/>
							<outline text="Here's an example of a URL we construct --" created="Fri, 18 Nov 2022 14:35:04 GMT">
								<outline text="https://social.scottfr.ee/oauth/authorize?client_id=1Z-8Zf2vOuGnmXY8w8YPwjAtSGuKwmSNxGqy_b2IEk8&amp;redirect_uri=http://social.rss.land:1401/callbackFromMastodon&amp;response_type=code&amp;scope=read+write+follow" created="Fri, 18 Nov 2022 14:35:14 GMT"/>
								</outline>
							</outline>
						</outline>
					<outline text="const path = &quot;oauth/authorize&quot;;" created="Thu, 17 Nov 2022 13:27:16 GMT"/>
					<outline text="const params = {" created="Thu, 17 Nov 2022 13:12:20 GMT">
						<outline text="client_id: config.clientKey," created="Thu, 17 Nov 2022 13:12:44 GMT"/>
						<outline text="redirect_uri: urlRedirect," created="Thu, 17 Nov 2022 13:12:54 GMT"/>
						<outline text="response_type: &quot;code&quot;," created="Thu, 17 Nov 2022 13:12:33 GMT"/>
						<outline text="scope: &quot;read+write+follow&quot;," created="Thu, 17 Nov 2022 13:13:05 GMT"/>
						<outline text="force_login: true" created="Sat, 19 Nov 2022 13:21:31 GMT"/>
						<outline text="};" created="Thu, 17 Nov 2022 13:12:26 GMT"/>
						</outline>
					<outline text="const url = config.urlMastodonServer + path + &quot;?&quot; + buildParamList (params, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="console.log (&quot;\ngetUrlForAuthorize: url == &quot; + url + &quot;\n&quot;);" created="Thu, 17 Nov 2022 20:07:23 GMT"/>
					<outline text="return (url);" created="Thu, 17 Nov 2022 20:01:03 GMT"/>
					<outline text="}" created="Thu, 17 Nov 2022 13:10:54 GMT"/>
					</outline>
				<outline text="function getAccessToken (codeFromMasto, callback) {" created="Fri, 18 Nov 2022 14:37:36 GMT">
					<outline text="Changes" isComment="true" created="Fri, 18 Nov 2022 14:51:46 GMT">
						<outline text="11/18/22; 11:30:46 AM by DW" created="Fri, 18 Nov 2022 16:30:45 GMT">
							<outline text="https://social.scottfr.ee/oauth/token?grant_type=authorization_code&amp;client_id=1Z-8Zf2vOuGnmXY8w8YPwjAtSGuKwmSNxGqy_b2IEk8&amp;client_secret=P50ZkcRARuAyChWzsnWF-Ld5QnM0kKeS15pbP7Tan2o&amp;redirect_uri=http://scripting.com/&amp;scope=read+write+follow&amp;code=FbXSOVPpq9eWqDkm5paZzu4KFkqVvLX_3vbj9XolpuA" isComment="true" created="Fri, 18 Nov 2022 14:51:46 GMT"/>
							<outline text="https://social.scottfr.ee/oauth/authorize?client_id=1M774u77Xj2DMvbSY-PJ1krRVSFcKFN65CZmqp5SEFU&amp;redirect_uri=https%3A%2F%2Fmammudeck.com%2F&amp;response_type=code&amp;scope=write%20read%20follow%20push" isComment="true"/>
							<outline text="&quot;{&quot;error&quot;:&quot;invalid_grant&quot;,&quot;error_description&quot;:&quot;The provided authorization grant is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.&quot;}&quot;" isComment="true"/>
							</outline>
						</outline>
					<outline text="const path = &quot;oauth/token&quot;;" created="Thu, 17 Nov 2022 13:27:16 GMT"/>
					<outline text="const params = {" created="Thu, 17 Nov 2022 13:12:20 GMT">
						<outline text="grant_type: &quot;authorization_code&quot;, " created="Fri, 18 Nov 2022 14:38:33 GMT"/>
						<outline text="grant_type: &quot;client_credentials&quot;," isComment="true" created="Fri, 18 Nov 2022 14:38:33 GMT"/>
						<outline text="client_id: config.clientKey," created="Thu, 17 Nov 2022 13:12:44 GMT"/>
						<outline text="client_secret: config.clientSecret," created="Fri, 18 Nov 2022 14:39:14 GMT"/>
						<outline text="redirect_uri: config.urlRedirect," created="Fri, 18 Nov 2022 14:39:15 GMT"/>
						<outline text="scope: &quot;read+write+follow&quot;," created="Thu, 17 Nov 2022 13:13:05 GMT"/>
						<outline text="code: codeFromMasto" created="Fri, 18 Nov 2022 14:39:59 GMT"/>
						<outline text="};" created="Thu, 17 Nov 2022 13:12:26 GMT"/>
						</outline>
					<outline text="const url = config.urlMastodonServer + path + &quot;?&quot; + buildParamList (params, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="console.log (&quot;getAccessToken: url == &quot; + url);" created="Thu, 17 Nov 2022 20:07:23 GMT"/>
					<outline text="httpRequest (url, &quot;POST&quot;, function (err, jsontext) {" created="Thu, 17 Nov 2022 20:01:03 GMT">
						<outline text="if (err) {" created="Fri, 18 Nov 2022 14:45:46 GMT">
							<outline text="callback (err);" created="Fri, 18 Nov 2022 14:46:02 GMT"/>
							<outline text="}" created="Fri, 18 Nov 2022 14:45:52 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 18 Nov 2022 14:45:52 GMT">
							<outline text="try {" created="Fri, 18 Nov 2022 16:31:24 GMT">
								<outline text="var jstruct = JSON.parse (jsontext);" created="Fri, 18 Nov 2022 16:31:38 GMT"/>
								<outline text="callback (undefined, jstruct);" created="Fri, 18 Nov 2022 16:31:48 GMT"/>
								<outline text="}" created="Fri, 18 Nov 2022 16:31:28 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Fri, 18 Nov 2022 16:31:29 GMT">
								<outline text="callback (err);" created="Fri, 18 Nov 2022 14:46:02 GMT"/>
								<outline text="}" created="Fri, 18 Nov 2022 16:31:33 GMT"/>
								</outline>
							<outline text="}" created="Fri, 18 Nov 2022 14:45:55 GMT"/>
							</outline>
						<outline text="});" created="Fri, 18 Nov 2022 14:45:41 GMT"/>
						</outline>
					<outline text="}" created="Fri, 18 Nov 2022 14:37:45 GMT"/>
					</outline>
				<outline text="" created="Sun, 20 Nov 2022 22:02:32 GMT"/>
				<outline text="function tootStatus (accessToken, statusText, callback) {" created="Sun, 20 Nov 2022 22:02:32 GMT">
					<outline text="const theRequest = {">
						<outline text="url: config.urlMastodonServer + &quot;api/v1/statuses&quot;,"/>
						<outline text="method: &quot;POST&quot;,"/>
						<outline text="headers: {">
							<outline text="Authorization: &quot;Bearer &quot; + accessToken"/>
							<outline text="},"/>
							</outline>
						<outline text="body: &quot;status=&quot; + statusText" created="Sun, 20 Nov 2022 22:11:40 GMT"/>
						<outline text="};"/>
						</outline>
					<outline text="" created="Sun, 20 Nov 2022 22:39:42 GMT"/>
					<outline text="request (theRequest, function (err, response, data) {">
						<outline text="if (err) {" created="Sun, 08 Aug 2021 15:33:13 GMT">
							<outline text="callback (err);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:20 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 08 Aug 2021 15:33:21 GMT">
							<outline text="var code = response.statusCode;" created="Tue, 04 Jan 2022 22:39:15 GMT"/>
							<outline text="if ((code &lt; 200) || (code &gt; 299)) {" created="Sun, 08 Aug 2021 15:33:23 GMT">
								<outline text="const message = &quot;The request returned a status code of &quot; + response.statusCode + &quot;.&quot;;" created="Sun, 08 Aug 2021 15:34:06 GMT"/>
								<outline text="callback ({message});" created="Sun, 08 Aug 2021 15:34:43 GMT"/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:28 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 08 Aug 2021 15:33:29 GMT">
								<outline text="callback (undefined, data) "/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:31 GMT"/>
								</outline>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:33 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sun, 20 Nov 2022 22:02:56 GMT"/>
					</outline>
				<outline text="" created="Wed, 16 Nov 2022 14:30:31 GMT"/>
				<outline text="function handleHttpRequest (theRequest) {">
					<outline text="Changes" isComment="true" created="Thu, 18 Mar 2021 21:30:01 GMT">
						<outline text="11/16/22; 9:33:27 AM by DW" created="Wed, 16 Nov 2022 14:33:27 GMT">
							<outline text="Cribbed from davetwitter." created="Wed, 16 Nov 2022 14:33:27 GMT"/>
							</outline>
						<outline text="3/18/21; 5:30:04 PM by DW" created="Thu, 18 Mar 2021 21:30:03 GMT">
							<outline text="We've made a bit of a mess around screenname parameters. " created="Thu, 18 Mar 2021 21:30:05 GMT"/>
							<outline text="I want prefer &quot;screenname&quot;, but we'll accept screen_name too." created="Thu, 18 Mar 2021 21:30:17 GMT"/>
							</outline>
						</outline>
					<outline text="var params = theRequest.params;"/>
					<outline text="const token = params.oauth_token;"/>
					<outline text="const secret = params.oauth_token_secret;"/>
					<outline text="function returnPlainText (s) {">
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnHtml (htmltext) {">
						<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnData (jstruct) {">
						<outline text="if (jstruct === undefined) {">
							<outline text="jstruct = {};"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnJsontext (jsontext) { //9/14/22 by DW">
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, jsontext.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnError (jstruct) {">
						<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnNotFound () {">
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnRedirect (url, code) { ">
						<outline text="var headers = {">
							<outline text="location: url"/>
							<outline text="};"/>
							</outline>
						<outline text="if (code === undefined) {">
							<outline text="code = 302;"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;, headers);"/>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="function httpReturn (err, returnedValue) {">
						<outline text="Changed" isComment="true" created="Wed, 14 Sep 2022 19:47:30 GMT">
							<outline text="9/14/22; 3:47:35 PM by DW" created="Wed, 14 Sep 2022 19:47:34 GMT">
								<outline text="If the returned value is an object, call returnData, but if it's something else, return it as a string. " created="Wed, 14 Sep 2022 19:47:36 GMT"/>
								<outline text="In all cases, the returned type is application/json." created="Wed, 14 Sep 2022 19:48:09 GMT"/>
								<outline text="This allows the river routines to convert the object to jsontext so it can cache that instead of an object." created="Wed, 14 Sep 2022 19:48:38 GMT"/>
								</outline>
							</outline>
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (typeof returnedValue == &quot;object&quot;) {" created="Wed, 14 Sep 2022 19:49:36 GMT">
								<outline text="returnData (returnedValue);"/>
								<outline text="}" created="Wed, 14 Sep 2022 19:49:54 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 14 Sep 2022 19:50:07 GMT">
								<outline text="returnJsontext (returnedValue); //9/14/22 by DW" created="Wed, 14 Sep 2022 19:52:50 GMT"/>
								<outline text="}" created="Wed, 14 Sep 2022 19:50:09 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Wed, 16 Nov 2022 15:36:32 GMT"/>
					<outline text="console.log (&quot;handleHttpRequest: lowerpath == &quot; + utils.jsonStringify (theRequest.lowerpath) + &quot;, params == &quot; + utils.jsonStringify (params));" isComment="true" created="Wed, 16 Nov 2022 14:33:59 GMT"/>
					<outline text="" created="Wed, 16 Nov 2022 14:35:27 GMT"/>
					<outline text="switch (theRequest.lowerpath) {">
						<outline text="case &quot;/now&quot;: " created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236">
							<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, new Date ());"/>
							<outline text="return;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/connect&quot;:" created="Thu, 17 Nov 2022 13:31:27 GMT">
							<outline text="console.log (&quot;handleHttpRequest: params.redirect_url == &quot; + params.redirect_url);" created="Sun, 20 Nov 2022 21:34:39 GMT"/>
							<outline text="returnRedirect (getUrlForAuthorize (params.redirect_url));" created="Thu, 17 Nov 2022 20:01:47 GMT"/>
							<outline text="return;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/callbackfrommastodon&quot;:" created="Thu, 17 Nov 2022 20:14:03 GMT">
							<outline text="getAccessToken (params.code, function (err, data) {" created="Fri, 18 Nov 2022 14:46:54 GMT">
								<outline text="console.log (utils.jsonStringify (params));" created="Fri, 18 Nov 2022 16:38:03 GMT"/>
								<outline text="returnPlainText (utils.jsonStringify (params));" created="Thu, 17 Nov 2022 20:15:40 GMT"/>
								<outline text="});" created="Fri, 18 Nov 2022 16:45:34 GMT"/>
								</outline>
							<outline text="returnPlainText (params.code);" isComment="true" created="Thu, 17 Nov 2022 20:15:40 GMT"/>
							<outline text="return;" created="Thu, 17 Nov 2022 20:14:12 GMT"/>
							</outline>
						<outline text="case &quot;/getaccesstoken&quot;: " created="Sun, 20 Nov 2022 00:38:37 GMT">
							<outline text="getAccessToken (params.code, httpReturn);" created="Fri, 18 Nov 2022 14:46:54 GMT"/>
							<outline text="return;" created="Sun, 20 Nov 2022 00:38:48 GMT"/>
							</outline>
						<outline text="" created="Sun, 20 Nov 2022 21:59:29 GMT"/>
						<outline text="case &quot;/toot&quot;: //11/20/22 by DW" created="Sun, 20 Nov 2022 21:59:30 GMT">
							<outline text="tootStatus (params.access_token, params.status, httpReturn);" created="Sun, 20 Nov 2022 22:01:22 GMT"/>
							<outline text="break;" created="Sun, 20 Nov 2022 22:01:42 GMT"/>
							</outline>
						<outline text="" created="Sun, 20 Nov 2022 21:59:30 GMT"/>
						<outline text="default: " created="Sun, 20 Nov 2022 21:58:29 GMT">
							<outline text="returnNotFound ();" created="Sun, 20 Nov 2022 21:58:39 GMT"/>
							<outline text="break;" created="Sun, 20 Nov 2022 21:58:45 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Wed, 16 Nov 2022 14:32:58 GMT"/>
				<outline text="const httpConfig = {">
					<outline text="port: config.httpPort,"/>
					<outline text="flLogToConsole: config.flLogToConsole,"/>
					<outline text="flAllowAccessFromAnywhere: config.flAllowAccessFromAnywhere,"/>
					<outline text="flPostEnabled: config.flPostEnabled,"/>
					<outline text="blockedAddresses: config.blockedAddresses //4/17/18 by DW"/>
					<outline text="};"/>
					</outline>
				<outline text="" created="Wed, 16 Nov 2022 15:42:08 GMT"/>
				<outline text="readConfig (function () {" created="Wed, 16 Nov 2022 15:42:09 GMT">
					<outline text="console.log (&quot;config == &quot; + utils.jsonStringify (config));" created="Wed, 16 Nov 2022 15:45:23 GMT"/>
					<outline text="davehttp.start (httpConfig, handleHttpRequest);"/>
					<outline text="});" created="Wed, 16 Nov 2022 15:42:17 GMT"/>
					</outline>
				<outline text="" created="Wed, 16 Nov 2022 15:42:09 GMT"/>
				<outline text="" created="Wed, 16 Nov 2022 15:42:09 GMT"/>
				</outline>
			<outline text="readme.md" created="Sun, 20 Nov 2022 15:02:46 GMT">
				<outline text="# mastoServer" created="Sun, 20 Nov 2022 15:02:48 GMT">
					<outline text="tbd" created="Sun, 20 Nov 2022 15:02:58 GMT"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Sun, 20 Nov 2022 14:50:48 GMT">
			<outline text="nodeEditorSuite.utilities.buildIMastoServer ()" created="Sun, 06 Nov 2022 15:51:50 GMT"/>
			</outline>
		</body>
	</opml>
